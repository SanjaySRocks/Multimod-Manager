/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>

#define PLUGIN "New Plug-In"
#define VERSION "1.0"
#define AUTHOR "author"

#define MAXMODS 50

new g_modcount;
new Array: g_tags, Array: g_ads[MAXMODS], Array: g_cfg[MAXMODS];

new g_conditions[][20] = 
{
	"currentmod",
	"currentmap",
	"lastmod",
	"lastmap"
};
new g_Oldsymbols[] =
{
	'[',
	']'
};
new g_Newsymbols[] =
{
	'%'
}

public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	register_concmd("amx_load", "LoadMods");
}

public LoadMods()
{
	log_amx("Laziness initiated...");
	new filePath[512], filePath2[512], szData[200], szModName[100], szTag[40];
	
	new configsDir[512];
	formatex(configsDir[get_configsdir(configsDir, charsmax(configsDir))], charsmax(configsDir), "/multimod");
	
	formatex(filePath, charsmax(filePath), "%s/multimod.ini", configsDir);
	
	new filePtr = fopen(filePath, "rt");
	
	if(filePtr)
	{	
		log_amx("Loaded fileptr %s", filePath);
		g_tags = ArrayCreate(40);
		while(g_modcount < MAXMODS && !feof(filePtr)) 
		{
			fgets(filePtr, szData, charsmax(szData));
			trim(szData);
						
			if(szData[0] == '"')
			{
				g_ads[g_modcount] = ArrayCreate(200);
				g_cfg[g_modcount] = ArrayCreate(50);
				
				parse(szData, szModName, charsmax(szModName), szTag, charsmax(szTag));
				ArrayPushString(g_tags, szTag);
				
				formatex(filePath2, charsmax(filePath2), "%s/%s-ads.ini", configsDir, szTag);
				LoadFile(g_ads[g_modcount], filePath2);
				
				formatex(filePath2, charsmax(filePath2), "%s/%s-cfg.cfg", configsDir, szTag);
				LoadFile(g_cfg[g_modcount], filePath2);
				
				g_modcount++
			}
		}
		fclose(filePtr);
	}
	
	PrintContent();
}
LoadFile(&Array: tempArray, const fName[])
{
	new fPtr = fopen(fName, "rt");
	new szData[512];
	if(fPtr)
	{
		while(!feof(fPtr))
		{
			fgets(fPtr, szData, charsmax(szData));
			trim(szData)
			if(!szData[0]) continue;
			ArrayPushString(tempArray, szData);
		}
		fclose(fPtr);
	}
}

PrintContent()
{
	new configsDir[512], szData[256];
	formatex(configsDir[get_configsdir(configsDir, charsmax(configsDir))], charsmax(configsDir), "/multimod/singlemodads.ini");
	
	new f = fopen(configsDir, "wt");
	new size;
	if(f)
	{	
		for(new i = 0; i < g_modcount; i++)
		{
			ArrayGetString(g_tags, i, szData, charsmax(szData));
			fprintf(f, "^n^n[%s]^n", szData);
			
			size = ArraySize(g_ads[i]);
			for(new j = 0; j < size; j++)
			{
				ArrayGetString(g_ads[i], j, szData, charsmax(szData));
				replace_custom(szData, charsmax(szData));
				fprintf(f, "%s^n", szData);
			}
			ArrayClear(g_ads[i]);
		}
		fclose(f);
	}
	configsDir[0] = 0;
	formatex(configsDir[get_configsdir(configsDir, charsmax(configsDir))], charsmax(configsDir), "/multimod/singlemodcfg.cfg");
	
	f = fopen(configsDir, "wt");
	
	if(f)
	{		
		for(new i = 0; i < g_modcount; i++)
		{
			ArrayGetString(g_tags, i, szData, charsmax(szData));
			fprintf(f, "^n^n[%s]^n", szData);
			
			size = ArraySize(g_cfg[i]);
			
			for(new j = 0; j < size; j++)
			{
				ArrayGetString(g_cfg[i], j, szData, charsmax(szData));
				fprintf(f, "%s^n", szData);
			}
			ArrayClear(g_cfg[i]);
		}
		fclose(f);
	}
	ArrayClear(g_tags);
	g_modcount = 0;
	log_amx("Time to sleep...");
}
replace_custom(szText[], len)
{
	new size = sizeof (g_conditions), szData[50], szData2[50];
	for(new i = 0; i < size; i++)
	{
		formatex(szData, charsmax(szData), "%c%s%c", g_Newsymbols[0], g_conditions[i], g_Newsymbols[0]);
		formatex(szData2, charsmax(szData2), "%c%s%c", g_Oldsymbols[0], g_conditions[i], g_Oldsymbols[1]);
		//log_amx("<%s> <%s>", szData, szData2)
		replace_all(szText, len, szData2, szData);
	}
}
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang1033\\ f0\\ fs16 \n\\ par }
*/
